trigger:
  branches:
    include:
      - main

variables:
- group: llm-deploy-vars  # Ensure this variable group is created and includes the correct values
- name: azureSubscription
  value: 'mymlops'  # The name of your Azure Service Connection in Azure DevOps
- name: resourceGroup
  value: 'mlops'
- name: workspaceName
  value: 'llm_mlops'
- name: endpointName
  value: 'stability-endpoint'

stages:
- stage: Deploy
  jobs:
  - job: DeployModel
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self

      # Use Python Version 3.9 for the pipeline
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'

      # Install Azure ML SDK
      - script: |
          python -m pip install --upgrade pip
          pip install azure-ai-ml azure-identity
        displayName: 'Install Azure ML SDK'

      # Deploy model to Azure ML
      - task: AzureCLI@2
        inputs:
          azureSubscription: $(azureSubscription)  # Use the Azure Service Connection from Azure DevOps
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            # Debugging: List available subscriptions to verify the active one
            echo "Listing available subscriptions..."
            az account list --output table

            # Check the currently active subscription for debugging
            echo "Current subscription:"
            az account show

            # Allow dynamic installation of preview extensions (for Azure ML)
            echo "Allowing dynamic installation of preview extensions..."
            az config set extension.dynamic_install_allow_preview=true

            # Remove the conflicting 'azure-cli-ml' extension if present
            echo "Removing the conflicting 'azure-cli-ml' extension..."
            az extension remove --name azure-cli-ml || true  # Ignore error if not installed

            # Install the Azure ML CLI extension (if not already installed)
            echo "Installing Azure ML CLI extension..."
            az extension add --name ml

            # Create the Online Endpoint if it doesn't exist
            echo "Creating the online endpoint..."
            az ml online-endpoint create --name stability-endpoint --file endpoint.yml --workspace-name $WORKSPACENAME --resource-group $RESOURCEGROUP

            # Test the LLM endpoint
            echo "Testing the LLM endpoint..."
            az ml online-endpoint invoke \
              --name $ENDPOINTNAME \
              --request-file request.json \
              --workspace-name $WORKSPACENAME \
              --resource-group $RESOURCEGROUP
        displayName: 'Deploy and Test Model to Azure ML'
